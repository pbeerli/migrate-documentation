%!PS-Adobe-2.0 EPSF-1.2
%%Title: ep.graph.vrt
%%Creator: Altsys Virtuoso 2.0
%%CreationDate: Sat Jun 07 11:43:51 PDT 1997
%%BoundingBox: 1693 2060 2268 2248
%%FHPathName:/Users/peter/Papers/Talks/boulder/originalgraphics/ep.graph.vrt
%ALDOriginalFile:/Users/peter/Papers/Talks/boulder/originalgraphics/ep.graph.vrt
%ALDBoundingBox: -36 -36 4032 4032 
%%DocumentSuppliedResources: procset Altsys_header 4 0
%%ColorUsage: Color
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: font Symbol
%%+ font Helvetica-Bold
%%DocumentFonts: Symbol
%%+ Helvetica-Bold
%%DocumentNeededFonts: Symbol
%%+ Helvetica-Bold
%%EndComments
%%BeginResource: procset Altsys_header 4 0
userdict begin /AltsysDict 245 dict def end
AltsysDict begin
/bdf{bind def}bind def
/xdf{exch def}bdf
/defed{where{pop true}{false}ifelse}bdf
/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}bdf
/d{setdash}bdf
/h{closepath}bdf
/H{}bdf
/J{setlinecap}bdf
/j{setlinejoin}bdf
/M{setmiterlimit}bdf
/n{newpath}bdf
/N{newpath}bdf
/q{gsave}bdf
/Q{grestore}bdf
/w{setlinewidth}bdf
/sepdef{
dup where not
{
AltsysSepDict
}
if
3 1 roll exch put
}bdf
/st{settransfer}bdf
/colorimage defed /_rci xdf
/_NXLevel2 defed {
_NXLevel2 not {
/colorimage where {
userdict eq {
/_rci false def
} if
} if
} if
} if
/md defed{
md type /dicttype eq {
/colorimage where {
md eq {
/_rci false def
}if
}if
/settransfer where {
md eq {
/st systemdict /settransfer get def
}if
}if
}if 
}if
/setstrokeadjust defed
{
true setstrokeadjust
/C{curveto}bdf
/L{lineto}bdf
/m{moveto}bdf
}
{
/dr{transform .25 sub round .25 add 
exch .25 sub round .25 add exch itransform}bdf
/C{dr curveto}bdf
/L{dr lineto}bdf
/m{dr moveto}bdf
/setstrokeadjust{pop}bdf
}ifelse
/rectstroke defed /xt xdf
xt {/yt save def} if
/privrectpath {
4 -2 roll m
dtransform round exch round exch idtransform
2 copy 0 lt exch 0 lt xor
{dup 0 exch rlineto exch 0 rlineto neg 0 exch rlineto}
{exch dup 0 rlineto exch 0 exch rlineto neg 0 rlineto}
ifelse
closepath
}bdf
/rectclip{newpath privrectpath clip newpath}def
/rectfill{gsave newpath privrectpath fill grestore}def
/rectstroke{gsave newpath privrectpath stroke grestore}def
xt {yt restore} if
/_fonthacksave false def
/currentpacking defed 
{
/_bfh {/_fonthacksave currentpacking def false setpacking} bdf
/_efh {_fonthacksave setpacking} bdf
}
{
/_bfh {} bdf
/_efh {} bdf
}ifelse
/packedarray{array astore readonly}ndf
/`
{
false setoverprint
/-save0- save def
5 index concat
pop
storerect left bottom width height rectclip
pop
userdict begin
/showpage {} def
0 setgray 0 setlinecap 1 setlinewidth
0 setlinejoin 10 setmiterlimit [] 0 setdash newpath
} bdf
/currentpacking defed{true setpacking}if
/min{2 copy gt{exch}if pop}bdf
/max{2 copy lt{exch}if pop}bdf
/xformfont { currentfont exch makefont setfont } bdf
/fhnumcolors 1 
statusdict begin
/processcolors defed 
{
pop processcolors
}
{
/deviceinfo defed {
deviceinfo /Colors known {
pop deviceinfo /Colors get
} if
} if
} ifelse
end 
def
/printerRes 
gsave
matrix defaultmatrix setmatrix
72 72 dtransform
abs exch abs
max
grestore
def
/graycalcs
[
{Angle Frequency}
{GrayAngle GrayFrequency}
{0 Width Height matrix defaultmatrix idtransform 
dup mul exch dup mul add sqrt 72 exch div}
{0 GrayWidth GrayHeight matrix defaultmatrix idtransform 
dup mul exch dup mul add sqrt 72 exch div}
] def
/calcgraysteps {
/currenthalftone defed
{currenthalftone /dicttype eq}{false}ifelse
{
currenthalftone begin
HalftoneType 4 le
{graycalcs HalftoneType 1 sub get exec}
{
HalftoneType 5 eq
{
Default begin
{graycalcs HalftoneType 1 sub get exec}
end
}
{0 60}
ifelse
}
ifelse
end
}
{
currentscreen pop exch
}
ifelse
printerRes 300 max exch div exch
2 copy
sin mul round dup mul
3 1 roll
cos mul round dup mul
add 1 add
dup maxsteps gt {pop maxsteps} if
} bdf
/nextrelease defed {
/languagelevel defed not {
/framebuffer defed {
0 40 string framebuffer 9 1 roll 8 {pop} repeat
dup 516 eq exch 520 eq or
{
/fhnumcolors 3 def
/currentscreen {60 0 {pop pop 1}}bdf
/calcgraysteps {maxsteps} bdf
}if
}if
}if
}if
fhnumcolors 1 ne {
/calcgraysteps {maxsteps} bdf
} if
/currentpagedevice defed {
currentpagedevice /PreRenderingEnhance known
{
currentpagedevice /PreRenderingEnhance get
{
/calcgraysteps {256 maxsteps min} def
} if
} if
} if
/gradfrequency 144 def
printerRes 1000 lt {
/gradfrequency 72 def
} if
/adjnumsteps {
dup dtransform abs exch abs max 
printerRes div 
gradfrequency mul 
round 
5 max 
min 
}bdf
/goodsep {
spots exch get 4 get dup sepname eq exch (_vc_Registration) eq or
}bdf
/BeginGradation defed
{/bb{BeginGradation}bdf}
{/bb{}bdf}
ifelse
/EndGradation defed
{/eb{EndGradation}bdf}
{/eb{}bdf}
ifelse
/bottom -0 def
/delta -0 def
/frac -0 def
/height -0 def
/left -0 def
/numsteps1 -0 def
/radius -0 def
/right -0 def
/top -0 def
/width -0 def
/xt -0 def
/yt -0 def
/df currentflat def
/tempstr 1 string def
/clipflatness currentflat 1 add def
/inverted?
0 currenttransfer exec .5 ge def
/tc1 [0 0 0 1] def
/tc2 [0 0 0 1] def
/storerect{/top xdf /right xdf /bottom xdf /left xdf 
/width right left sub def /height top bottom sub def}bdf
/concatprocs{
systemdict /packedarray known 
{dup type /packedarraytype eq 2 index type /packedarraytype eq or}{false}ifelse
{
/proc2 exch cvlit def/proc1 exch cvlit def
proc1 aload pop proc2 aload pop
proc1 length proc2 length add packedarray cvx
}
{
/proc2 exch cvlit def/proc1 exch cvlit def
/newproc proc1 length proc2 length add array def
newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval
newproc cvx
}ifelse
}bdf
/i{dup 0 eq
{pop df dup}
{dup} ifelse 
1 add
/clipflatness xdf setflat
}bdf
version cvr 38.0 le
{/setrgbcolor{
currenttransfer exec 3 1 roll
currenttransfer exec 3 1 roll
currenttransfer exec 3 1 roll
setrgbcolor}bdf}if
/vms {/vmsv save def} bdf
/vmr {vmsv restore} bdf
/vmrs{vmsv restore /vmsv save def}bdf
/eomode{ 
{/filler /eofill load def /clipper /eoclip load def}
{/filler /fill load def /clipper /clip load def}
ifelse
}bdf
/normtaper{}bdf
/logtaper{9 mul 1 add log}bdf
/CD{
/NF exch def
{
exch dup
/FID ne 1 index/UniqueID ne and
{exch NF 3 1 roll put}
{pop pop}
ifelse
}forall 
NF
}bdf
/MN{
1 index length 
/Len exch def
dup length Len add 
string dup 
Len 
4 -1 roll 
putinterval 
dup 
0 
4 -1 roll
putinterval
}bdf
/RC{4 -1 roll /ourvec xdf 256 string cvs(|______)anchorsearch
{1 index MN cvn/NewN exch def cvn
findfont dup maxlength dict CD dup/FontName NewN put dup
/Encoding ourvec put NewN exch definefont pop}{pop}ifelse}bdf
/RF{
dup 
FontDirectory exch 
known
{pop 3 -1 roll pop}
{RC}
ifelse
}bdf
/FF{dup 256 string cvs(|______)exch MN cvn dup FontDirectory exch known
{exch pop findfont 3 -1 roll pop}
{pop dup findfont dup maxlength dict CD dup dup
/Encoding exch /Encoding get 256 array copy 7 -1 roll 
{3 -1 roll dup 4 -2 roll put}forall put definefont}
ifelse}bdf
/fps{
currentflat 
exch 
dup 0 le{pop 1}if
{
dup setflat 3 index stopped
{1.3 mul dup 3 index gt{pop setflat pop pop stop}if}
{exit}
ifelse
}loop 
pop setflat pop pop
}bdf
/fp{100 currentflat fps}bdf
/clipper{clip}bdf
/W{/clipper load 100 clipflatness dup setflat fps}bdf
end%. AltsysDict
%%EndResource
%%EndProlog
%%BeginSetup
AltsysDict begin
_bfh
%%IncludeResource: font Symbol
_efh
0 dict dup begin
end 
/f0 /Symbol FF def
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
0 dict dup begin
end 
/f1 /Helvetica-Bold FF def
end %. AltsysDict
%%EndSetup
AltsysDict begin
/onlyk4{false}ndf
/ccmyk{dup 5 -1 roll sub 0 max exch}ndf
/cmyk2gray{
4 -1 roll 0.3 mul 4 -1 roll 0.59 mul 4 -1 roll 0.11 mul
add add add 1 min neg 1 add
}bdf
/setcmykcolor{1 exch sub ccmyk ccmyk ccmyk pop setrgbcolor}ndf
/maxcolor { 
max max max
} ndf
/maxspot {
pop
} ndf
/setcmykcoloroverprint{4{dup -1 eq{pop 0}if 4 1 roll}repeat setcmykcolor}ndf
/findcmykcustomcolor{5 packedarray}ndf
/setcustomcolor{exch aload pop pop 4{4 index mul 4 1 roll}repeat setcmykcolor pop}ndf
/setseparationgray{setgray}ndf
/setoverprint{pop}ndf
/currentoverprint false ndf
/cmykbufs2gray{
0 1 2 index length 1 sub
{
4 index 1 index get0.3 mul
4 index 2 index get0.59 mul
4 index 3 index get0.11 mul
4 index 4 index get
add add add cvi 255 min
255 exch sub
2 index 3 1 roll put
}for
4 1 roll pop pop pop
}bdf
/colorimage{
pop pop
[
5 -1 roll/exec cvx 
6 -1 roll/exec cvx 
7 -1 roll/exec cvx 
8 -1 roll/exec cvx
/cmykbufs2gray cvx
]cvx 
image
}
%. version 47.1 on Linotronic of Postscript defines colorimage incorrectly (rgb model only)
version cvr 47.1 le 
statusdict /product get (Lino) anchorsearch{pop pop true}{pop false}ifelse
and{userdict begin bdf end}{ndf}ifelse
fhnumcolors 1 ne {/yt save def} if
/customcolorimage{
aload pop
(_vc_Registration) eq 
{
pop pop pop pop separationimage
}
{
/ik xdf /iy xdf /im xdf /ic xdf
ic im iy ik cmyk2gray /xt xdf
currenttransfer
{dup 1.0 exch sub xt mul add}concatprocs
st
image
}
ifelse
}ndf
fhnumcolors 1 ne {yt restore} if
fhnumcolors 3 ne {/yt save def} if
/customcolorimage{
aload pop 
(_vc_Registration) eq 
{
pop pop pop pop separationimage
}
{
/ik xdf /iy xdf /im xdf /ic xdf
1.0 dup ic ik add min sub
1.0 dup im ik add min sub
1.0 dup iy ik add min sub
/ic xdf /iy xdf /im xdf
currentcolortransfer
4 1 roll
{dup 1.0 exch sub ic mul add}concatprocs 4 1 roll
{dup 1.0 exch sub iy mul add}concatprocs 4 1 roll
{dup 1.0 exch sub im mul add}concatprocs 4 1 roll
setcolortransfer
{/dummy xdf dummy}concatprocs{dummy}{dummy}true 3 colorimage
}
ifelse
}ndf
fhnumcolors 3 ne {yt restore} if
fhnumcolors 4 ne {/yt save def} if
/customcolorimage{
aload pop
(_vc_Registration) eq 
{
pop pop pop pop separationimage
}
{
/ik xdf /iy xdf /im xdf /ic xdf
currentcolortransfer
{1.0 exch sub ik mul ik sub 1 add}concatprocs 4 1 roll
{1.0 exch sub iy mul iy sub 1 add}concatprocs 4 1 roll
{1.0 exch sub im mul im sub 1 add}concatprocs 4 1 roll
{1.0 exch sub ic mul ic sub 1 add}concatprocs 4 1 roll
setcolortransfer
{/dummy xdf dummy}concatprocs{dummy}{dummy}{dummy}
true 4 colorimage
}
ifelse
}ndf
fhnumcolors 4 ne {yt restore} if
/separationimage{image}ndf
/newcmykcustomcolor{6 packedarray}ndf
/inkoverprint false ndf
/setinkoverprint{pop}ndf
/setspotcolor {
spots exch get
dup 4 get (_vc_Registration) eq
{pop 1 exch sub setseparationgray}
{0 5 getinterval exch setcustomcolor}
ifelse
}ndf
/currentcolortransfer{currenttransfer dup dup dup}ndf
/setcolortransfer{st pop pop pop}ndf
/fas{}ndf
/sas{}ndf
/fhsetspreadsize{pop}ndf
/filler{fill}bdf
/F{gsave {filler}fp grestore}bdf
/f{closepath F}bdf
/S{gsave {stroke}fp grestore}bdf
/s{closepath S}bdf
/bc4 [0 0 0 0] def
/_lfp4 {
/yt xdf
/xt xdf
/ang xdf
storerect
/taperfcn xdf
/k2 xdf /y2 xdf /m2 xdf /c2 xdf
/k1 xdf /y1 xdf /m1 xdf /c1 xdf
c1 c2 sub abs
m1 m2 sub abs
y1 y2 sub abs
k1 k2 sub abs
maxcolor
calcgraysteps mul abs round
height abs adjnumsteps
dup 2 lt {pop 2} if
1 sub /numsteps1 xdf
currentflat mark
currentflat clipflatness
/delta top bottom sub numsteps1 1 add div def
/right right left sub def
/botsv top delta sub def
{
{
W
xt yt translate 
ang rotate
xt neg yt neg translate 
dup setflat
/bottom botsv def
0 1 numsteps1
{
numsteps1 div taperfcn /frac xdf
bc4 0 c2 c1 sub frac mul c1 add put
bc4 1 m2 m1 sub frac mul m1 add put
bc4 2 y2 y1 sub frac mul y1 add put
bc4 3 k2 k1 sub frac mul k1 add put
bc4 vc
1 index setflat
{
mark {newpath left bottom right delta rectfill}stopped
{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}
{cleartomark exit}ifelse
}loop
/bottom bottom delta sub def
}for
}
gsave stopped grestore
{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}
{exit}ifelse
}loop
cleartomark setflat
}bdf
/bcs [0 0] def
/_lfs4 {
/yt xdf
/xt xdf
/ang xdf
storerect
/taperfcn xdf
/tint2 xdf
/tint1 xdf
bcs exch 1 exch put
tint1 tint2 sub abs
bcs 1 get maxspot
calcgraysteps mul abs round
height abs adjnumsteps
dup 2 lt {pop 2} if
1 sub /numsteps1 xdf
currentflat mark
currentflat clipflatness
/delta top bottom sub numsteps1 1 add div def
/right right left sub def
/botsv top delta sub def
{
{
W
xt yt translate 
ang rotate
xt neg yt neg translate 
dup setflat
/bottom botsv def
0 1 numsteps1
{
numsteps1 div taperfcn /frac xdf
bcs 0
1.0 tint2 tint1 sub frac mul tint1 add sub
put bcs vc
1 index setflat
{
mark {newpath left bottom right delta rectfill}stopped
{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}
{cleartomark exit}ifelse
}loop
/bottom bottom delta sub def
}for
}
gsave stopped grestore
{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}
{exit}ifelse
}loop
cleartomark setflat
}bdf
/_rfs4 {
/tint2 xdf
/tint1 xdf
bcs exch 1 exch put
/radius xdf
/yt xdf
/xt xdf
tint1 tint2 sub abs
bcs 1 get maxspot
calcgraysteps mul abs round
radius abs adjnumsteps
dup 2 lt {pop 2} if
1 sub /numsteps1 xdf
radius numsteps1 div 2 div /halfstep xdf 
currentflat mark
currentflat clipflatness
{
{
dup setflat
W 
0 1 numsteps1
{
dup /radindex xdf
numsteps1 div /frac xdf
bcs 0
tint2 tint1 sub frac mul tint1 add
put bcs vc
1 index setflat
{
newpath mark xt yt radius 1 frac sub mul halfstep add 0 360
{arc
radindex numsteps1 ne 
{
xt yt 
radindex 1 add numsteps1 
div 1 exch sub 
radius mul halfstep add
dup xt add yt moveto 
360 0 arcn 
} if
fill
}stopped
{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}
{cleartomark exit}ifelse
}loop
}for
}
gsave stopped grestore
{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}
{exit}ifelse
}loop
cleartomark setflat
}bdf
/_rfp4 {
/k2 xdf /y2 xdf /m2 xdf /c2 xdf
/k1 xdf /y1 xdf /m1 xdf /c1 xdf
/radius xdf
/yt xdf
/xt xdf
c1 c2 sub abs
m1 m2 sub abs
y1 y2 sub abs
k1 k2 sub abs
maxcolor
calcgraysteps mul abs round
radius abs adjnumsteps
dup 2 lt {pop 2} if
1 sub /numsteps1 xdf
radius numsteps1 div 2 div /halfstep xdf 
currentflat mark
currentflat clipflatness
{
{
dup setflat
W 
0 1 numsteps1
{
dup /radindex xdf
numsteps1 div /frac xdf
bc4 0 c2 c1 sub frac mul c1 add put
bc4 1 m2 m1 sub frac mul m1 add put
bc4 2 y2 y1 sub frac mul y1 add put
bc4 3 k2 k1 sub frac mul k1 add put
bc4 vc
1 index setflat
{
newpath mark xt yt radius 1 frac sub mul halfstep add 0 360
{arc
radindex numsteps1 ne 
{
xt yt 
radindex 1 add numsteps1 
div 1 exch sub 
radius mul halfstep add
dup xt add yt moveto 
360 0 arcn 
} if
fill
}stopped
{cleartomark exch 1.3 mul dup setflat exch 2 copy gt{stop}if}
{cleartomark exit}ifelse
}loop
}for
}
gsave stopped grestore
{exch pop 2 index exch 1.3 mul dup 100 gt{cleartomark setflat stop}if}
{exit}ifelse
}loop
cleartomark setflat
}bdf
/lfp4{_lfp4}ndf
/lfs4{_lfs4}ndf
/rfs4{_rfs4}ndf
/rfp4{_rfp4}ndf
/ScitexVignette defed /xt xdf
xt not {/yt save def} if
/anyeq {
cvlit exch
cvlit exch
1 index type /arraytype eq 
2 index type /packedarraytype eq 
or
1 index type /arraytype eq
2 index type /packedarraytype eq
or
and {
1 index length
1 index length eq {
dup length 1 sub -1 0 {
/ind exch def
1 index ind get
1 index ind get
anyeq not {/ind -1 def exit} if
} for
pop pop
ind 0
eq
}{
pop pop false
} ifelse
}{
eq 
} ifelse
} def
/lfp4 where {
pop
/oldlfp /lfp4 load def
/lfp4 {
/yt xdf
/xt xdf
/ang xdf
storerect
/taperfcn xdf
/kc2 xdf
/yc2 xdf
/mc2 xdf
/cc2 xdf
/kc1 xdf
/yc1 xdf
/mc1 xdf
/cc1 xdf
save
20 dict dup begin
/VGVersion 0 def
/typeOfVign 1 def
/xDimension right left sub abs def
/yDimension top bottom sub abs def
/numOfColorPoints 2 def
/verticalCoord [ top bottom ] def
/horizontalCoord [ left left ] def
/colorArray [
cc1 mc1 yc1 kc1
cc2 mc2 yc2 kc2
] def
/stepVectorFunction /taperfcn load {logtaper} anyeq {[1]}{[0]}ifelse def
/smoothVG [0] def
end
W
xt yt translate ang rotate xt neg yt neg translate
ScitexVignette
exch
restore
not {
/BeginGradation where {pop BeginGradation} if
cc1 mc1 yc1 kc1 cc2 mc2 yc2 kc2 
/taperfcn load left bottom right top ang xt yt oldlfp
/EndGradation where {pop EndGradation} if
} if
}bdf
} if 
/lfs4 where {
pop
/oldlfs /lfs4 load def
/lfs4 {
/yt xdf
/xt xdf
/ang xdf
storerect
/taperfcn xdf
/tint2 xdf
/tint1 xdf
/spotNum xdf
save
20 dict dup begin
/VGVersion 0 def
/typeOfVign 1 def
/xDimension right left sub abs def
/yDimension top bottom sub abs def
/numOfColorPoints 2 def
/verticalCoord [ top bottom ] def
/horizontalCoord [ left left ] def
/colorArray [
tint2 spots spotNum
get aload pop pop pop 4{4 index mul 4 1 roll}repeat
5 -1 roll pop
tint1 spots spotNum
get aload pop pop pop 4{4 index mul 4 1 roll}repeat
5 -1 roll pop
] def
/stepVectorFunction /taperfcn load {logtaper} anyeq {[1]}{[0]}ifelse def
/smoothVG [0] def
end
W
xt yt translate ang rotate xt neg yt neg translate
ScitexVignette
exch
restore
not {
/BeginGradation where {pop BeginGradation} if
spotNum tint1 tint2
/taperfcn load left bottom right top ang xt yt oldlfs
/EndGradation where {pop EndGradation} if
} if
}bdf
} if 
/rfp4 where {
pop
/oldrfp /rfp4 load def
/rfp4 {
/kc2 xdf
/yc2 xdf
/mc2 xdf
/cc2 xdf
/kc1 xdf
/yc1 xdf
/mc1 xdf
/cc1 xdf
/radius xdf
/yt xdf
/xt xdf
save
20 dict dup begin
/VGVersion 0 def
/typeOfVign 3 def
/xDimension radius 2 mul def
/yDimension radius 2 mul def
/numOfColorPoints 2 def
/verticalCoord [ yt yt ] def
/horizontalCoord [ xt dup radius add ] def
/colorArray [
cc2 mc2 yc2 kc2
cc1 mc1 yc1 kc1
] def
/stepVectorFunction [0] def
/smoothVG [0] def
end
W
ScitexVignette
exch
restore
not {
/BeginGradation where {pop BeginGradation} if
xt yt radius cc1 mc1 yc1 kc1 cc2 mc2 yc2 kc2 oldrfp
/EndGradation where {pop EndGradation} if
} if
} bdf
} if 
/rfs4 where {
pop
/oldrfs /rfs4 load def
/rfs4 {
/tint2 xdf
/tint1 xdf
/spotNum xdf
/radius xdf
/yt xdf
/xt xdf
save
20 dict dup begin
/VGVersion 0 def
/typeOfVign 3 def
/xDimension radius 2 mul def
/yDimension radius 2 mul def
/numOfColorPoints 2 def
/verticalCoord [ yt yt ] def
/horizontalCoord [ xt dup radius add ] def
/colorArray [
tint2 spots spotNum
get aload pop pop pop 4{4 index mul 4 1 roll}repeat
5 -1 roll pop
tint1 spots spotNum
get aload pop pop pop 4{4 index mul 4 1 roll}repeat
5 -1 roll pop
] def
/stepVectorFunction [0] def
/smoothVG [0] def
end
W
ScitexVignette
exch
restore
not {
/BeginGradation where {pop BeginGradation} if
xt yt radius spotNum tint1 tint2 oldrfs
/EndGradation where {pop EndGradation} if
} if
} bdf
} if 
xt not {yt restore} if
/cvc [0 0 0 1] def
/vc{
AltsysDict /cvc 2 index put
aload length 4 eq
{setcmykcolor}
{setspotcolor}
ifelse
}bdf
/origmtx matrix currentmatrix def
/ImMatrix matrix currentmatrix def
0 setseparationgray
/imgr {-36 -36 4032 4032 } def
/bleed 0 def
/clpr {-36 -36 3852 3852 } def
/xs 1 def
/ys 1 def
/botx 0 def
/overlap 0 def
/wdist 18 def
0 2 mul fhsetspreadsize
0 0 ne {/df 0 def /clipflatness 0 def} if
/maxsteps 256 def
/currentpacking defed{false setpacking}if 
/spots[
1 0 0 0 (Process Cyan) false newcmykcustomcolor
0 1 0 0 (Process Magenta) false newcmykcustomcolor
0 0 1 0 (Process Yellow) false newcmykcustomcolor
0 0 0 1 (Process Black) false newcmykcustomcolor
]def
/textopf false def
/curtextmtx{}def
/otw .25 def
/msf{dup/curtextmtx xdf makefont setfont}bdf
/makesetfont/msf load def
/curtextheight{.707104 .707104 curtextmtx dtransform
dup mul exch dup mul add sqrt}bdf
/ta{1 index
{tempstr 0 2 index put tempstr 2 index 
gsave exec grestore
tempstr stringwidth rmoveto
5 index eq{6 index 6 index rmoveto}if
3 index 3 index rmoveto
}forall 7{pop}repeat}bdf
/sts{/textopf currentoverprint def vc setoverprint
/ts{awidthshow}def exec textopf setoverprint}bdf
/stol{/xt currentlinewidth def 
setlinewidth vc newpath
/ts{{false charpath stroke}ta}def exec 
xt setlinewidth}bdf
/strk{/textopf currentoverprint def vc setoverprint
/ts{{false charpath stroke}ta}def exec 
textopf setoverprint
}bdf
n
[] 0 d
3.863708 M
1 w
0 j
0 J
false setoverprint
0 i
false eomode
[0 0 0 1]vc
vms
1700.5634 2165.533 m
1700.5634 2170.0247 1704.2045 2173.6659 1708.6963 2173.6659 C
1713.188 2173.6659 1716.8292 2170.0247 1716.8292 2165.533 C
1716.8292 2161.0412 1713.188 2157.4001 1708.6963 2157.4001 C
1704.2045 2157.4001 1700.5634 2161.0412 1700.5634 2165.533 C
[1 0.9022 0 0] vc
f
0.9 w
3.899994 M
[0 0 0 0] vc
S
n
1781.0166 2165.533 m
1781.0166 2170.0247 1784.6577 2173.6659 1789.1495 2173.6659 C
1793.6412 2173.6659 1797.2824 2170.0247 1797.2824 2165.533 C
1797.2824 2161.0412 1793.6412 2157.4001 1789.1495 2157.4001 C
1784.6577 2157.4001 1781.0166 2161.0412 1781.0166 2165.533 C
[1 0.9022 0 0] vc
f
[0 0 0 0] vc
S
n
1809.1868 2165.533 m
1809.1868 2170.0247 1812.8279 2173.6659 1817.3196 2173.6659 C
1821.8114 2173.6659 1825.4526 2170.0247 1825.4526 2165.533 C
1825.4526 2161.0412 1821.8114 2157.4001 1817.3196 2157.4001 C
1812.8279 2157.4001 1809.1868 2161.0412 1809.1868 2165.533 C
[1 0.9022 0 0] vc
f
[0 0 0 0] vc
S
n
1847.2327 2165.533 m
1847.2327 2170.0247 1850.8739 2173.6659 1855.3656 2173.6659 C
1859.8573 2173.6659 1863.4985 2170.0247 1863.4985 2165.533 C
1863.4985 2161.0412 1859.8573 2157.4001 1855.3656 2157.4001 C
1850.8739 2157.4001 1847.2327 2161.0412 1847.2327 2165.533 C
[1 0.9022 0 0] vc
f
[0 0 0 0] vc
S
n
1878.8886 2165.533 m
1878.8886 2170.0247 1882.5298 2173.6659 1887.0215 2173.6659 C
1891.5132 2173.6659 1895.1544 2170.0247 1895.1544 2165.533 C
1895.1544 2161.0412 1891.5132 2157.4001 1887.0215 2157.4001 C
1882.5298 2157.4001 1878.8886 2161.0412 1878.8886 2165.533 C
[1 0.9022 0 0] vc
f
[0 0 0 0] vc
S
n
1886.7267 2165.533 m
1886.7267 2170.0247 1890.3679 2173.6659 1894.8596 2173.6659 C
1899.3513 2173.6659 1902.9925 2170.0247 1902.9925 2165.533 C
1902.9925 2161.0412 1899.3513 2157.4001 1894.8596 2157.4001 C
1890.3679 2157.4001 1886.7267 2161.0412 1886.7267 2165.533 C
[1 0.9022 0 0] vc
f
[0 0 0 0] vc
S
n
1891.0793 2165.533 m
1891.0793 2170.0247 1894.7204 2173.6659 1899.2122 2173.6659 C
1903.7039 2173.6659 1907.3451 2170.0247 1907.3451 2165.533 C
1907.3451 2161.0412 1903.7039 2157.4001 1899.2122 2157.4001 C
1894.7204 2157.4001 1891.0793 2161.0412 1891.0793 2165.533 C
[1 0.9022 0 0] vc
f
[0 0 0 0] vc
S
n
1913.4402 2165.533 m
1913.4402 2170.0247 1917.0814 2173.6659 1921.5732 2173.6659 C
1926.0649 2173.6659 1929.7061 2170.0247 1929.7061 2165.533 C
1929.7061 2161.0412 1926.0649 2157.4001 1921.5732 2157.4001 C
1917.0814 2157.4001 1913.4402 2161.0412 1913.4402 2165.533 C
[1 0.9022 0 0] vc
f
[0 0 0 0] vc
S
n
1939.2868 2165.533 m
1939.2868 2170.0247 1942.928 2173.6659 1947.4197 2173.6659 C
1951.9115 2173.6659 1955.5527 2170.0247 1955.5527 2165.533 C
1955.5527 2161.0412 1951.9115 2157.4001 1947.4197 2157.4001 C
1942.928 2157.4001 1939.2868 2161.0412 1939.2868 2165.533 C
[1 0.9022 0 0] vc
f
[0 0 0 0] vc
S
n
1756.9041 2165.533 m
1756.9041 2170.0247 1760.5452 2173.6659 1765.037 2173.6659 C
1769.5287 2173.6659 1773.1699 2170.0247 1773.1699 2165.533 C
1773.1699 2161.0412 1769.5287 2157.4001 1765.037 2157.4001 C
1760.5452 2157.4001 1756.9041 2161.0412 1756.9041 2165.533 C
[1 0.9022 0 0] vc
f
[0 0 0 0] vc
S
n
1695.3349 2134.7442 m
1946.8733 2134.7442 L
2.6999 w
[0 0 0 1] vc
S
n
true eomode
1946.8733 2134.7442 m
1943.5068 2139.794 L
1956.9729 2134.7442 L
1943.5068 2129.6944 L
1946.8733 2134.7442 L
f
n
1881.9318 2125.3185 m
1791.9324 2125.3185 L
1791.9324 2112.7186 L
1881.9318 2112.7186 L
1881.9318 2125.3185 L
n
q
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
{
f1 [16.19989 0 0 16.19989 0 0] makesetfont
1791.932419 2113.686966 m
0 0 32 0 0 (Mobility) ts
}
true
[0 0 0 1]sts
Q
1723.5295 2201.7228 m
1704.6296 2201.7228 L
1704.6296 2189.1229 L
1723.5295 2189.1229 L
1723.5295 2201.7228 L
n
q
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
{
f1 [16.19989 0 0 16.19989 0 0] makesetfont
1704.629593 2190.091263 m
0 0 32 0 0 (b) ts
}
true
[0 0 0 1]sts
Q
1780.1649 2201.7228 m
1761.2651 2201.7228 L
1761.2651 2189.1229 L
1780.1649 2189.1229 L
1780.1649 2201.7228 L
n
q
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
{
f1 [16.19989 0 0 16.19989 0 0] makesetfont
1761.26506 2190.091263 m
0 0 32 0 0 (i) ts
}
true
[0 0 0 1]sts
Q
1804.8498 2201.7228 m
1785.95 2201.7228 L
1785.95 2189.1229 L
1804.8498 2189.1229 L
1804.8498 2201.7228 L
n
q
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
{
f1 [16.19989 0 0 16.19989 0 0] makesetfont
1785.949951 2190.091263 m
0 0 32 0 0 (d) ts
}
true
[0 0 0 1]sts
Q
1831.8584 2201.7228 m
1812.9586 2201.7228 L
1812.9586 2189.1229 L
1831.8584 2189.1229 L
1831.8584 2201.7228 L
n
q
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
{
f1 [16.19989 0 0 16.19989 0 0] makesetfont
1812.958557 2190.091263 m
0 0 32 0 0 (a) ts
}
true
[0 0 0 1]sts
Q
1868.7425 2201.7228 m
1849.8426 2201.7228 L
1849.8426 2189.1229 L
1868.7425 2189.1229 L
1868.7425 2201.7228 L
n
q
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
{
f1 [16.19989 0 0 16.19989 0 0] makesetfont
1849.842606 2190.091263 m
0 0 32 0 0 (h) ts
}
true
[0 0 0 1]sts
Q
1893.4274 2201.7228 m
1874.5275 2201.7228 L
1874.5275 2189.1229 L
1893.4274 2189.1229 L
1893.4274 2201.7228 L
n
q
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
{
f1 [16.19989 0 0 16.19989 0 0] makesetfont
1874.527512 2190.091263 m
0 0 32 0 0 (k) ts
}
true
[0 0 0 1]sts
Q
1908.8175 2201.7228 m
1889.9176 2201.7228 L
1889.9176 2189.1229 L
1908.8175 2189.1229 L
1908.8175 2201.7228 L
n
q
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
{
f1 [16.19989 0 0 16.19989 0 0] makesetfont
1889.917603 2190.091263 m
0 0 32 0 0 (g) ts
}
true
[0 0 0 1]sts
Q
1922.4648 2201.7228 m
1903.5649 2201.7228 L
1903.5649 2189.1229 L
1922.4648 2189.1229 L
1922.4648 2201.7228 L
n
q
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
{
f1 [16.19989 0 0 16.19989 0 0] makesetfont
1903.564941 2190.091263 m
0 0 32 0 0 (c) ts
}
true
[0 0 0 1]sts
Q
vmrs
1939.0167 2201.7228 m
1920.1168 2201.7228 L
1920.1168 2189.1229 L
1939.0167 2189.1229 L
1939.0167 2201.7228 L
n
q
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
{
f1 [16.19989 0 0 16.19989 0 0] makesetfont
1920.116837 2190.091263 m
0 0 32 0 0 (f) ts
}
true
[0 0 0 1]sts
Q
1962.5396 2201.7228 m
1943.6397 2201.7228 L
1943.6397 2189.1229 L
1962.5396 2189.1229 L
1962.5396 2201.7228 L
n
q
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
{
f1 [16.19989 0 0 16.19989 0 0] makesetfont
1943.639725 2190.091263 m
0 0 32 0 0 (l) ts
}
true
[0 0 0 1]sts
Q
[0.899994 0 0 0.899994 2013.537155 2091.106033] 0 0 282 174 () `
%%BeginDocument: 
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 282 174
%%Creator: NeXT Mathematica Notebook Front End Version 2.2
%%Title: Clipboard
%%CreationDate: Sometime Sometime
%%EndComments
/Mnodistort true def
150 dict begin
/Mfixwid true def
/Mrot 0 def
/Mpstart {
    MathPictureStart
} bind def
/Mpend {
    MathPictureEnd
} bind def
/Mscale {
    0 1 0 1
    5 -1 roll
    MathScale
} bind def
/Plain	/Courier findfont def
/Bold	/Courier-Bold findfont def
/Italic /Courier-Oblique findfont def
/MathPictureStart {
	/Mimatrix
	 matrix currentmatrix
	def
	gsave
	newpath
	Mleft
	Mbottom
	translate
	1 -1 scale
	/Mtmatrix
	matrix currentmatrix
	def
	Plain
	Mfontsize scalefont
	setfont
	0 setgray
	0 setlinewidth
} bind def
/MathPictureEnd {
	grestore
} bind def
/MathSubStart {
		Mgmatrix Mtmatrix
        Mleft Mbottom
        Mwidth Mheight
        8 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        Mgmatrix setmatrix
        10 -2 roll
        moveto
        Mtmatrix setmatrix
        currentpoint
        2 copy translate
        /Mtmatrix matrix currentmatrix def
        /Mleft 0 def
        /Mbottom 0 def
        3 -1 roll
        exch sub
        /Mheight exch def
        sub
        /Mwidth exch def
} bind def
/MathSubEnd {
        /Mheight exch def
        /Mwidth exch def
        /Mbottom exch def
        /Mleft exch def
        /Mtmatrix exch def
        dup setmatrix
        /Mgmatrix exch def
} bind def
/Mdot {
	moveto
	0 0 rlineto
	stroke
} bind def
/Mtetra {
	moveto
	lineto
	lineto
	lineto
	fill
} bind def
/Metetra {
	moveto
	lineto
	lineto
	lineto
	closepath
	gsave
	fill
	grestore
	0 setgray
	stroke
} bind def
/Mistroke {
	flattenpath
	0 0 0
	{
	4 2 roll
	pop pop
	}
	{
	4 -1 roll
	2 index
	sub dup mul
	4 -1 roll
	2 index
	sub dup mul
	add sqrt
	4 -1 roll
	add
	3 1 roll
	}
	{
	stop
	}
	{
	stop
	}
	pathforall
	pop pop
	currentpoint
	stroke
	moveto
	currentdash
	3 -1 roll
	add
	setdash
} bind def
/Mfstroke {
	stroke
	currentdash
	pop 0
	setdash
} bind def
/Mrotsboxa {
	gsave
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	grestore
	Msboxa
	3  -1 roll
	/Mtmatrix
	exch def
	/Mrot
	0 def
} bind def
/Msboxa {
	newpath
	5 -1 roll
	Mvboxa
	pop
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Msboxa1
	5 -3 roll
	Msboxa1
	Mboxrot
	[
	7 -2 roll
	2 copy
	[
	3 1 roll
	10 -1 roll
	9 -1 roll
	]
	6 1 roll
	5 -2 roll
	]
} bind def
/Msboxa1 {
	sub
	2 div
	dup
	2 index
	1 add
	mul
	3 -1 roll
	-1 add
	3 -1 roll
	mul
} bind def
/Mvboxa	{
	Mfixwid
	{
	Mvboxa1
	}
	{
	dup
	Mwidthcal
	0 exch
	{
	add
	}
	forall
	exch
	Mvboxa1
	4 index
	7 -1 roll
	add
	4 -1 roll
	pop
	3 1 roll
	}
	ifelse
} bind def
/Mvboxa1 {
	gsave
	newpath
	[ true
	3 -1 roll
	{
	Mbbox
	5 -1 roll
	{
	0
	5 1 roll
	}
	{
	7 -1 roll
	exch sub
	(m) stringwidth pop
	.3 mul
	sub
	7 1 roll
	6 -1 roll
	4 -1 roll
	Mmin
	3 -1 roll
	5 index
	add
	5 -1 roll
	4 -1 roll
	Mmax
	4 -1 roll
	}
	ifelse
	false
	}
	forall
	{ stop } if
	counttomark
	1 add
	4 roll
	]
	grestore
} bind def
/Mbbox {	% str Mbbox xlow ylow xhigh yhigh
	1 dict begin
	0 0 moveto		% str
	/temp (T) def
	{	gsave
		currentpoint newpath moveto
		temp 0 3 -1 roll put temp
		false charpath flattenpath currentpoint
		pathbbox
		grestore moveto lineto moveto} forall
	pathbbox
	newpath
	end
} bind def
/Mmin {
	2 copy
	gt
	{ exch } if
	pop
} bind def
/Mmax {
	2 copy
	lt
	{ exch } if
	pop
} bind def
/Mrotshowa {
	dup
	/Mrot
	exch def
	Mrotcheck
	Mtmatrix
	dup
	setmatrix
	7 1 roll
	4 index
	4 index
	translate
	rotate
	3 index
	-1 mul
	3 index
	-1 mul
	translate
	/Mtmatrix
	matrix
	currentmatrix
	def
	Mgmatrix setmatrix
	Mshowa
	/Mtmatrix
	exch def
	/Mrot 0 def
} bind def
/Mshowa {
	4 -2 roll
	moveto
	2 index
	Mtmatrix setmatrix
	Mvboxa
	7 1 roll
	Mboxout
	6 -1 roll
	5 -1 roll
	4 -1 roll
	Mshowa1
	4 1 roll
	Mshowa1
	rmoveto
	currentpoint
	Mfixwid
	{
	Mshowax
	}
	{
	Mshoway
	}
	ifelse
	pop pop pop pop
	Mgmatrix setmatrix
} bind def
/Mshowax {
	0 1
        4 index length
        -1 add
        {
        2 index
        4 index
        2 index
        get
        3 index
        add
        moveto
        4 index
        exch get
        show
        } for
} bind def
/Mshoway {
        3 index
        Mwidthcal
        5 1 roll
	0 1
	4 index length
	-1 add
	{
	2 index
	4 index
	2 index
	get
	3 index
	add
	moveto
	4 index
	exch get
	[
	6 index
	aload
	length
	2 add
	-1 roll
	{
	pop
	Strform
	stringwidth
	pop
	neg
	exch
	add
	0 rmoveto
	}
	exch
	kshow
	cleartomark
	} for
	pop
} bind def
/Mwidthcal {
	[
	exch
	{
	Mwidthcal1
	}
	forall
	]
	[
	exch
	dup
	Maxlen
	-1 add
	0 1
	3 -1 roll
	{
	[
	exch
	2 index
	{
	1 index
	Mget
	exch
	}
	forall
	pop
	Maxget
	exch
	}
	for
	pop
	]
	Mreva
} bind def
/Mreva	{
	[
	exch
	aload
	length
	-1 1
	{1 roll}
	for
	]
} bind def
/Mget	{
	1 index
	length
	-1 add
	1 index
	ge
	{
	get
	}
	{
	pop pop
	0
	}
	ifelse
} bind def
/Maxlen	{
	[
	exch
	{
	length
	}
	forall
	Maxget
} bind def
/Maxget	{
	counttomark
	-1 add
	1 1
	3 -1 roll
	{
	pop
	Mmax
	}
	for
	exch
	pop
} bind def
/Mwidthcal1 {
	[
	exch
	{
	Strform
	stringwidth
	pop
	}
	forall
	]
} bind def
/Strform {
	/tem (x) def
	tem 0
	3 -1 roll
	put
	tem
} bind def
/Mshowa1 {
	2 copy
	add
	4 1 roll
	sub
	mul
	sub
	-2 div
} bind def
/MathScale {
 	Mwidth
	Mheight
	Mlp
	translate
	scale
	/yscale exch def
	/ybias exch def
	/xscale exch def
	/xbias exch def
	/Momatrix
	xscale yscale matrix scale
	xbias ybias matrix translate
	matrix concatmatrix def
	/Mgmatrix
	matrix currentmatrix def
} bind def
/Mlp {
	3 copy
	Mlpfirst
	{
	Mnodistort
	{
	Mmin
	dup
	} if
	4 index
	2 index
	2 index
	Mlprun
	11 index
	11 -1 roll
	10 -4 roll
	Mlp1
	8 index
	9 -5 roll
	Mlp1
	4 -1 roll
	and
	{ exit } if
	3 -1 roll
	pop pop
	} loop
	exch
	3 1 roll
	7 -3 roll
	pop pop pop
} bind def
/Mlpfirst {
	3 -1 roll
	dup length
	2 copy
	-2 add
	get
	aload
	pop pop pop
	4 -2 roll
	-1 add
	get
	aload
	pop pop pop
	6 -1 roll
	3 -1 roll
	5 -1 roll
	sub
	dup /MsaveAx exch def
	div
	4 1 roll
	exch sub
	dup /MsaveAy exch def
	div
} bind def
/Mlprun {
	2 copy
	4 index
	0 get
	dup
	4 1 roll
	Mlprun1
	3 copy
	8 -2 roll
	9 -1 roll
	{
	3 copy
	Mlprun1
	3 copy
	11 -3 roll
	/gt Mlpminmax
	8 3 roll
	11 -3 roll
	/lt Mlpminmax
	8 3 roll
	} forall
	pop pop pop pop
	3 1 roll
	pop pop
	aload pop
	5 -1 roll
	aload pop
	exch
	6 -1 roll
	Mlprun2
	8 2 roll
	4 -1 roll
	Mlprun2
	6 2 roll
	3 -1 roll
	Mlprun2
	4 2 roll
	exch
	Mlprun2
	6 2 roll
} bind def
/Mlprun1 {
	aload pop
	exch
	6 -1 roll
	5 -1 roll
	mul add
	4 -2 roll
	mul
	3 -1 roll
	add
} bind def
/Mlprun2 {
	2 copy
	add 2 div
	3 1 roll
	exch sub
} bind def
/Mlpminmax {
	cvx
	2 index
	6 index
	2 index
	exec
	{
	7 -3 roll
	4 -1 roll
	} if
	1 index
	5 index
	3 -1 roll
	exec
	{
	4 1 roll
	pop
	5 -1 roll
	aload
	pop pop
	4 -1 roll
	aload pop
	[
	8 -2 roll
	pop
	5 -2 roll
	pop
	6 -2 roll
	pop
	5 -1 roll
	]
	4 1 roll
	pop
	}
	{
	pop pop pop
	} ifelse
} bind def
/Mlp1 {
	5 index
	3 index	sub
	5 index
	2 index mul
	1 index
	le
	1 index
	0 le
	or
	dup
	not
	{
	1 index
	3 index	div
	.99999 mul
	8 -1 roll
	pop
	7 1 roll
	}
	if
	8 -1 roll
	2 div
	7 -2 roll
	pop sub
	5 index
	6 -3 roll
	pop pop
	mul sub
	exch
} bind def
/intop 0 def
/inrht 0 def
/inflag 0 def
/outflag 0 def
/xadrht 0 def
/xadlft 0 def
/yadtop 0 def
/yadbot 0 def
/Minner {
	outflag
	1
	eq
	{
	/outflag 0 def
	/intop 0 def
	/inrht 0 def
	} if
	5 index
	gsave
	Mtmatrix setmatrix
	Mvboxa pop
	grestore
	3 -1 roll
	pop
	dup
	intop
	gt
	{
	/intop
	exch def
	}
	{ pop }
	ifelse
	dup
	inrht
	gt
	{
	/inrht
	exch def
	}
	{ pop }
	ifelse
	pop
	/inflag
	1 def
} bind def
/Mouter {
	/xadrht 0 def
	/xadlft 0 def
	/yadtop 0 def
	/yadbot 0 def
	inflag
	1 eq
	{
	dup
	0 lt
	{
	dup
	intop
	mul
	neg
	/yadtop
	exch def
	} if
	dup
	0 gt
	{
	dup
	intop
	mul
	/yadbot
	exch def
	}
	if
	pop
	dup
	0 lt
	{
	dup
	inrht
	mul
	neg
	/xadrht
	exch def
	} if
	dup
	0 gt
	{
	dup
	inrht
	mul
	/xadlft
	exch def
	} if
	pop
	/outflag 1 def
	}
	{ pop pop}
	ifelse
	/inflag 0 def
	/inrht 0 def
	/intop 0 def
} bind def
/Mboxout {
	outflag
	1
	eq
	{
	4 -1
	roll
	xadlft
	leadjust
	add
	sub
	4 1 roll
	3 -1
	roll
	yadbot
	leadjust
	add
	sub
	3 1
	roll
	exch
	xadrht
	leadjust
	add
	add
	exch
	yadtop
	leadjust
	add
	add
	/outflag 0 def
	/xadlft 0 def
	/yadbot 0 def
	/xadrht 0 def
	/yadtop 0 def
	} if
} bind def
/leadjust {
	(m) stringwidth pop
	.5 mul
} bind def
/Mrotcheck {
	dup
	90
	eq
	{
	yadbot
	/yadbot
	xadrht
	def
	/xadrht
	yadtop
	def
	/yadtop
	xadlft
	def
	/xadlft
	exch
	def
	}
	if
	dup
	cos
	1 index
	sin
	Checkaux
	dup
	cos
	1 index
	sin neg
	exch
	Checkaux
	3 1 roll
	pop pop
} bind def
/Checkaux {
	4 index
	exch
	4 index
	mul
	3 1 roll
	mul add
	4 1 roll
} bind def
/Mboxrot {
	Mrot
	90 eq
	{
	brotaux
	4 2
	roll
	}
	if
	Mrot
	180 eq
	{
	4 2
        roll
	brotaux
	4 2
	roll
	brotaux
	}
	if
	Mrot
	270 eq
	{
	4 2
	roll
	brotaux
	}
	if
} bind def
/brotaux {
	neg
	exch
	neg
} bind def
/Mabsproc {
	0
        matrix defaultmatrix
        dtransform idtransform
	dup mul exch
	dup mul
	add sqrt
} bind def
/Mabswid {	
        Mabsproc
	setlinewidth	
} bind def
/Mabsdash {	
        exch
        [
        exch
        {
        Mabsproc
        }
        forall
        ]
        exch
        setdash
} bind def
/MBeginOrig { Momatrix concat} bind def
/MEndOrig { Mgmatrix setmatrix} bind def
/sampledsound where
{ pop}
{ /sampledsound {
exch
pop
exch
5 1 roll
mul
4 idiv
mul
2 idiv
exch pop
exch
/Mtempproc exch def
{ Mtempproc pop }
repeat
} bind def
} ifelse
% Here are the short operators
/g { setgray} bind def
/k { setcmykcolor} bind def
/m { moveto} bind def
/p { gsave} bind def
/r { setrgbcolor} bind def
/w { setlinewidth} bind def
/C { curveto} bind def
/F { fill} bind def
/L { lineto} bind def
/P { grestore} bind def
/s { stroke} bind def


%
% now simple conversion of cmykcolor to rgbcolor
% subtract k and then take complements
/setcmykcolor where
{ pop}
{ /setcmykcolor {	 % c m y k
	4 1
	roll			% k c m y
	[			% k c m y [
	4 1 
	roll			% k [  c m y
	] 			% k [ c m y ]
	{
	1 index		% k elem k
	sub			% k elem-k
	1
	sub neg		% k 1-(elem-k)
	dup
	0
	lt
	{
	pop
	0
	}
	if
	dup
	1
	gt
	{
	pop
	1
	}
	if
	exch		% 1-(elem-k) k
	} forall	% r g b k
	pop
	setrgbcolor
} bind def
} ifelse

/Mcharproc	% max
{
  	currentfile
  	(x)
  	readhexstring
  	pop		% max val
  	0 get
  	exch		% val max
 	div		% nval
} bind def

/Mshadeproc	% max ncols
{
	dup		% max ncols ncols
	3 1
	roll		% ncols max ncols
	{		% ncols max 
	dup		% ncols max max
	Mcharproc		% ncols max val
	3 1
	roll		% v1.. ncols max
	} repeat
	1 eq
	{
	setgray
	}
	{
	3 eq
	{
	setrgbcolor
	}
	{
	setcmykcolor
	} ifelse
	} ifelse
} bind def

/Mrectproc % x0 x1 y0 y1
{
	3 index         % x0 x1 y0 y1 x0
	2 index         % x0 x1 y0 y1 x0 y0
	moveto          % x0 x1 y0 y1
	2 index         % x0 x1 y0 y1 x1
	3 -1
	roll            % x0 x1 y1 x1 y0
	lineto          % x0 x1 y1
	dup             % x0 x1 y1 y1
	3 1
	roll            % x0 y1 x1 y1
	lineto          % x0 y1
	lineto
	fill
} bind def

/Mcolorimage     % nx ny depth matrix proc bool ncols
{
	7 1
	roll		% ncols nx ny depth matrix proc bool
	pop
	pop
	matrix
	invertmatrix
	concat          % ncols nx ny depth
	2 exch exp      % ncols nx ny 2^depth
	1 sub           % ncols nx ny max
	3 1 roll        % ncols max nx ny
	1 1             % ncols max nx ny 1 1
	2 index         % ncols max nx ny 1 1 ny
	{               % ncols max nx ny iy
	1 1             % ncols max nx ny iy 1 1
	4 index         % ncols max nx ny iy 1 1 nx
	{               % ncols max nx ny iy ix
	dup             % ncols max nx ny iy ix ix
	1 sub           % ncols max nx ny iy ix x0
	exch            % ncols max nx ny iy x0 x1
	2 index         % ncols max nx ny iy x0 x1 iy
	dup             % ncols max nx ny iy x0 x1 iy iy
	1 sub           % ncols max nx ny iy x0 x1 iy y0
	exch            % ncols max nx ny iy x0 x1 y0 y1
	7 index         % ncols max nx ny iy x0 x1 y0 y1 max
	9 index		% ncols max nx ny iy x0 x1 y0 y1 max ncols
	Mshadeproc	% ncols max nx ny iy x0 x1 y0 y1
	Mrectproc        % max nx ny iy
	} for           % x loop
	pop             % max nx ny
	} for           % y loop
	pop pop pop pop
} bind def

/Mimage  % nx ny depth matrix proc
{
	pop
	matrix
	invertmatrix
	concat          % nx ny depth
	2 exch exp      % nx ny 2^depth
	1 sub           % nx ny max
	3 1 roll        % max nx ny
	1 1             % max nx ny 1 1
	2 index         % max nx ny 1 1 ny
	{               % max nx ny iy
	1 1             % max nx ny iy 1 1
	4 index         % max nx ny iy 1 1 nx
	{               % max nx ny iy ix
	dup             % max nx ny iy ix ix
	1 sub           % max nx ny iy ix x0
	exch            % max nx ny iy x0 x1
	2 index         % max nx ny iy x0 x1 iy
	dup             % max nx ny iy x0 x1 iy iy
	1 sub           % max nx ny iy x0 x1 iy y0
	exch            % max nx ny iy x0 x1 y0 y1
	7 index         % max nx ny iy x0 x1 y0 y1 max
	Mcharproc	% max nx ny iy x0 x1 y0 y1 val
	setgray         % max nx ny iy x0 x1 y0 y1
	Mrectproc        % max nx ny iy
	} for           % x loop
	pop             % max nx ny
	} for           % y loop
	pop pop pop
} bind def


%MFill fills the drawing area with the current color.
/MFill {
	-1 -1 		moveto
	Mwidth 1 add -1 	lineto
	Mwidth 1 add Mheight 1 add 	lineto
	-1 Mheight 1 add 	lineto
	fill
} bind def

% xmin xmax ymin ymax MPlotRegion alters the origin, Mwidth and Mheight 
% so that the picture fills the altered region
/MPlotRegion {		% xmin xmax ymin ymax MPlotRegion
	3 index		% xmin xmax ymin ymax xmin
	Mwidth mul	% xmin xmax ymin ymax xmin_pos
	2 index		% xmin xmax ymin ymax xmin_pos ymin
	Mheight mul	% xmin xmax ymin ymax xmin_pos ymin_pos
	translate	% xmin xmax ymin ymax
	exch sub	% xmin xmax ymax-ymin
	Mheight mul	% xmin xmax new_height
	/Mheight
	exch def	% xmin xmax
	exch sub	% xmax-xmin
	Mwidth mul	% new-width
	/Mwidth
	exch def
} bind def
/colorimage {Mcolorimage} bind def
/image {Mimage} bind def
/Mleft		1.000000 def
/Mbottom	173.284454 def
/Mwidth		280.000000 def
/Mheight	172.284454 def
/Courier findfont 12 scalefont setfont
/Mfontsize 10 def
/Plain /Courier findfont def
/Courier findfont 10 scalefont setfont
0 Mbottom Mheight neg add 2 mul Mheight add translate
1 -1 scale
%!
%%Creator: Mathematica
%%AspectRatio: .61803 
MathPictureStart
%% Graphics
/Helvetica findfont 14  scalefont  setfont
% Scaling calculations
0.02381 0.095238 0.014688 0.588631 [
[(2)] .21429 .01469 0 2 Msboxa
[(4)] .40476 .01469 0 2 Msboxa
[(6)] .59524 .01469 0 2 Msboxa
[(8)] .78571 .01469 0 2 Msboxa
[(10)] .97619 .01469 0 2 Msboxa
[(0.2)] .01131 .13241 1 0 Msboxa
[(0.4)] .01131 .25014 1 0 Msboxa
[(0.6)] .01131 .36787 1 0 Msboxa
[(0.8)] .01131 .48559 1 0 Msboxa
[(1)] .01131 .60332 1 0 Msboxa
[ -0.001 -0.001 0 0 ]
[ 1.001 .61903 0 0 ]
] MathScale
% Start of Graphics
1 setlinecap
1 setlinejoin
newpath
[ ] 0 setdash
0 g
p
p
.002 w
.21429 .01469 m
.21429 .02094 L
s
P
[(2)] .21429 .01469 0 2 Mshowa
p
.002 w
.40476 .01469 m
.40476 .02094 L
s
P
[(4)] .40476 .01469 0 2 Mshowa
p
.002 w
.59524 .01469 m
.59524 .02094 L
s
P
[(6)] .59524 .01469 0 2 Mshowa
p
.002 w
.78571 .01469 m
.78571 .02094 L
s
P
[(8)] .78571 .01469 0 2 Mshowa
p
.002 w
.97619 .01469 m
.97619 .02094 L
s
P
[(10)] .97619 .01469 0 2 Mshowa
p
.001 w
.0619 .01469 m
.0619 .01844 L
s
P
p
.001 w
.1 .01469 m
.1 .01844 L
s
P
p
.001 w
.1381 .01469 m
.1381 .01844 L
s
P
p
.001 w
.17619 .01469 m
.17619 .01844 L
s
P
p
.001 w
.25238 .01469 m
.25238 .01844 L
s
P
p
.001 w
.29048 .01469 m
.29048 .01844 L
s
P
p
.001 w
.32857 .01469 m
.32857 .01844 L
s
P
p
.001 w
.36667 .01469 m
.36667 .01844 L
s
P
p
.001 w
.44286 .01469 m
.44286 .01844 L
s
P
p
.001 w
.48095 .01469 m
.48095 .01844 L
s
P
p
.001 w
.51905 .01469 m
.51905 .01844 L
s
P
p
.001 w
.55714 .01469 m
.55714 .01844 L
s
P
p
.001 w
.63333 .01469 m
.63333 .01844 L
s
P
p
.001 w
.67143 .01469 m
.67143 .01844 L
s
P
p
.001 w
.70952 .01469 m
.70952 .01844 L
s
P
p
.001 w
.74762 .01469 m
.74762 .01844 L
s
P
p
.001 w
.82381 .01469 m
.82381 .01844 L
s
P
p
.001 w
.8619 .01469 m
.8619 .01844 L
s
P
p
.001 w
.9 .01469 m
.9 .01844 L
s
P
p
.001 w
.9381 .01469 m
.9381 .01844 L
s
P
p
.002 w
0 .01469 m
1 .01469 L
s
P
p
.002 w
.02381 .13241 m
.03006 .13241 L
s
P
[(0.2)] .01131 .13241 1 0 Mshowa
p
.002 w
.02381 .25014 m
.03006 .25014 L
s
P
[(0.4)] .01131 .25014 1 0 Mshowa
p
.002 w
.02381 .36787 m
.03006 .36787 L
s
P
[(0.6)] .01131 .36787 1 0 Mshowa
p
.002 w
.02381 .48559 m
.03006 .48559 L
s
P
[(0.8)] .01131 .48559 1 0 Mshowa
p
.002 w
.02381 .60332 m
.03006 .60332 L
s
P
[(1)] .01131 .60332 1 0 Mshowa
p
.001 w
.02381 .03823 m
.02756 .03823 L
s
P
p
.001 w
.02381 .06178 m
.02756 .06178 L
s
P
p
.001 w
.02381 .08532 m
.02756 .08532 L
s
P
p
.001 w
.02381 .10887 m
.02756 .10887 L
s
P
p
.001 w
.02381 .15596 m
.02756 .15596 L
s
P
p
.001 w
.02381 .1795 m
.02756 .1795 L
s
P
p
.001 w
.02381 .20305 m
.02756 .20305 L
s
P
p
.001 w
.02381 .2266 m
.02756 .2266 L
s
P
p
.001 w
.02381 .27369 m
.02756 .27369 L
s
P
p
.001 w
.02381 .29723 m
.02756 .29723 L
s
P
p
.001 w
.02381 .32078 m
.02756 .32078 L
s
P
p
.001 w
.02381 .34432 m
.02756 .34432 L
s
P
p
.001 w
.02381 .39141 m
.02756 .39141 L
s
P
p
.001 w
.02381 .41496 m
.02756 .41496 L
s
P
p
.001 w
.02381 .4385 m
.02756 .4385 L
s
P
p
.001 w
.02381 .46205 m
.02756 .46205 L
s
P
p
.001 w
.02381 .50914 m
.02756 .50914 L
s
P
p
.001 w
.02381 .53268 m
.02756 .53268 L
s
P
p
.001 w
.02381 .55623 m
.02756 .55623 L
s
P
p
.001 w
.02381 .57977 m
.02756 .57977 L
s
P
p
.002 w
.02381 0 m
.02381 .61803 L
s
P
P
p
0 .098 1 r
.02 w
.02381 .60332 m
.03333 .5473 L
.04286 .49662 L
.05238 .45076 L
.0619 .40926 L
.07143 .37171 L
.08095 .33774 L
.09048 .30699 L
.1 .27918 L
.10952 .25401 L
.11905 .23123 L
.12857 .21063 L
.1381 .19198 L
.14762 .17511 L
.15714 .15984 L
.16667 .14603 L
.17619 .13353 L
.18571 .12222 L
.19524 .11199 L
.20476 .10273 L
.21429 .09435 L
.22381 .08677 L
.23333 .07991 L
.24286 .0737 L
.25238 .06809 L
.2619 .06301 L
.27143 .05841 L
.28095 .05425 L
.29048 .05048 L
.3 .04708 L
.30952 .04399 L
.31905 .04121 L
.32857 .03868 L
.3381 .0364 L
.34762 .03433 L
.35714 .03246 L
.36667 .03077 L
.37619 .02924 L
.38571 .02786 L
.39524 .0266 L
.40476 .02547 L
.41429 .02444 L
.42381 .02352 L
.43333 .02268 L
.44286 .02192 L
.45238 .02123 L
.4619 .02061 L
.47143 .02004 L
.48095 .01953 L
.49048 .01907 L
Mistroke
.5 .01865 L
.50952 .01828 L
.51905 .01794 L
.52857 .01763 L
.5381 .01735 L
.54762 .01709 L
.55714 .01687 L
.56667 .01666 L
.57619 .01647 L
.58571 .0163 L
.59524 .01615 L
.60476 .01601 L
.61429 .01588 L
.62381 .01577 L
.63333 .01567 L
.64286 .01557 L
.65238 .01549 L
.6619 .01541 L
.67143 .01534 L
.68095 .01528 L
.69048 .01523 L
.7 .01517 L
.70952 .01513 L
.71905 .01509 L
.72857 .01505 L
.7381 .01501 L
.74762 .01498 L
.75714 .01495 L
.76667 .01493 L
.77619 .01491 L
.78571 .01489 L
.79524 .01487 L
.80476 .01485 L
.81429 .01483 L
.82381 .01482 L
.83333 .01481 L
.84286 .0148 L
.85238 .01479 L
.8619 .01478 L
.87143 .01477 L
.88095 .01476 L
.89048 .01475 L
.9 .01475 L
.90952 .01474 L
.91905 .01474 L
.92857 .01473 L
.9381 .01473 L
.94762 .01472 L
.95714 .01472 L
.96667 .01472 L
Mistroke
.97619 .01472 L
Mfstroke
P
0 0 m
1 0 L
1 .61803 L
0 .61803 L
closepath
clip
newpath
% End of Graphics
MathPictureEnd
%%PSTrailer
end

%%EPS Trailer

%%EndDocument
end -save0- restore 
2189.279 2082.3633 m
2146.0635 2082.3633 L
2146.0635 2060.3056 L
2189.279 2060.3056 L
2189.279 2082.3633 L
n
q
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
{
f1 [16.19989 0 0 16.19989 0 0] makesetfont
2146.063492 2070.731781 m
0 0 32 0 0 (Time) ts
}
true
[0 0 0 1]sts
Q
1990.0167 2211.1176 m
1990.0167 2130.1182 L
2002.6167 2130.1182 L
2002.6167 2211.1176 L
1990.0167 2211.1176 L
n
q
_bfh
%%IncludeResource: font Helvetica-Bold
_efh
{
f1 [0 16.19989 -16.19989 0 0 0] makesetfont
2001.6483 2130.118164 m
0 0.239761 32 0 -0.239777 (Pr) ts
0 -0.323822 rmoveto }
true
[0 0 0 1]sts
{
f1 [0 16.19989 -16.19989 0 0 0] makesetfont
0 0.239761 32 0 -0.239777 (obability) ts
}
true
[0 0 0 1]sts
Q
vmr
end
%%Trailer
%%DocumentNeededResources: font Symbol
%%+ font Helvetica-Bold
%%DocumentFonts: Symbol
%%+ Helvetica-Bold
%%DocumentNeededFonts: Symbol
%%+ Helvetica-Bold
